

# *************
# Autogenerated from driver file driver_allspp_10mplots.py
# *************
import numba
import numpy as np
from math import *
from driver_allspp_10mplots import driver

# the total number of species enabled
number_of_species = 7

# the tree species type identifier (integer >= 0) to string name look up table
species_code_to_name = ['ABSI', 'BEPE', 'LASI', 'PIOB', 'PISI', 'PISY', 'POTR']

# the name to species code look up table
name_to_species_code = {'PISI': 4, 'BEPE': 1, 'POTR': 6, 'ABSI': 0, 'PISY': 5, 'LASI': 2, 'PIOB': 3}

# the light compensation point (CP) by species
species_code_to_CP = [0.15, 0.03, 0.03, 0.15, 0.12, 0.06, 0.06]

# the SEED value by species
species_code_to_SEED = [0.31, 0.1, 0.31, 0.31, 0.56, 0.31, 0.1]

# the inseeding lag time by species
species_code_to_inseeding_lag = [6, 2, 2, 6, 5, 3, 3]

@numba.jit()
def compute_species_factors_weather(GDD_matrix, drydays_fraction_mat, spp_in_sim):
    '''

    Parameters: GDD_matrix -- a matrix the size of the sim grid of accumulated growing degrees over this year in sim
                drydays_fraction_mat -- the fraction 0 to 1 of the growing season in drought

    Returns:    GDD_3D_spp_factor_matrix -- the species specific degree day factors, size : nx,ny,nspp
                soil_moist_3D_spp_factor_matrix -- the species specific soil moisture factors, size : nx,ny,nspp
    '''
    nx,ny = GDD_matrix.shape
    GDD_3D_spp_factor_matrix = np.zeros((nx,ny,spp_in_sim))
    soil_moist_3D_spp_factor_matrix = np.zeros((nx,ny,spp_in_sim))

    for x in range(nx):
        for y in range(ny):
            for spp in range(spp_in_sim): #address of each cell in 3-D matrix
                if spp == 0:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_0(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_0(drydays_fraction_mat[x,y])
                elif spp == 1:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_1(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_1(drydays_fraction_mat[x,y])
                elif spp == 2:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_2(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_2(drydays_fraction_mat[x,y])
                elif spp == 3:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_3(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_3(drydays_fraction_mat[x,y])
                elif spp == 4:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_4(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_4(drydays_fraction_mat[x,y])
                elif spp == 5:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_5(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_5(drydays_fraction_mat[x,y])
                elif spp == 6:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_6(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_6(drydays_fraction_mat[x,y])

    return GDD_3D_spp_factor_matrix, soil_moist_3D_spp_factor_matrix

@numba.jit()
def compute_species_factors_soil(relative_soil_fertility_matrix, spp_in_sim, permafrost_matrix):
    '''

    Parameters:  relative_soil_fertility_matrix -- a matrix the size of sim grid with values 0 to 1 for each plot in sim 
                 spp_in_sim -- a scalar of how many species are participation in the simulation
                 permafrost_matrix -- a matrix the size of sim grid with values of 0 or 1 for where permafrost absent or present, respectively

    Returns:    soil_fert_3D_spp_factor_matrix -- the species specific soil fertility factors, size : nx,ny,nspp
                permafrost_factor_matrix -- the species specific permafrost factor, size: nx, ny, nspp
    '''
    nx,ny = relative_soil_fertility_matrix.shape
    soil_fert_3D_spp_factor_matrix = np.zeros((nx,ny,spp_in_sim))
    permafrost_factor_matrix = np.zeros((nx,ny,spp_in_sim))

    for x in range(nx):
        for y in range(ny):
            for spp in range(spp_in_sim): #address of each cell in 3-D matrix
                if spp == 0:
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_0(relative_soil_fertility_matrix[x,y])
                    permafrost_factor_matrix[x,y,spp] = permafrost_factor_numba_species_0(permafrost_matrix[x,y])
                elif spp == 1:
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_1(relative_soil_fertility_matrix[x,y])
                    permafrost_factor_matrix[x,y,spp] = permafrost_factor_numba_species_1(permafrost_matrix[x,y])
                elif spp == 2:
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_2(relative_soil_fertility_matrix[x,y])
                    permafrost_factor_matrix[x,y,spp] = permafrost_factor_numba_species_2(permafrost_matrix[x,y])
                elif spp == 3:
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_3(relative_soil_fertility_matrix[x,y])
                    permafrost_factor_matrix[x,y,spp] = permafrost_factor_numba_species_3(permafrost_matrix[x,y])
                elif spp == 4:
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_4(relative_soil_fertility_matrix[x,y])
                    permafrost_factor_matrix[x,y,spp] = permafrost_factor_numba_species_4(permafrost_matrix[x,y])
                elif spp == 5:
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_5(relative_soil_fertility_matrix[x,y])
                    permafrost_factor_matrix[x,y,spp] = permafrost_factor_numba_species_5(permafrost_matrix[x,y])
                elif spp == 6:
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_6(relative_soil_fertility_matrix[x,y])
                    permafrost_factor_matrix[x,y,spp] = permafrost_factor_numba_species_6(permafrost_matrix[x,y])

    return soil_fert_3D_spp_factor_matrix, permafrost_factor_matrix


def compute_species_factors(GDD_matrix, drydays_fraction_mat, relative_soil_fertility_matrix, spp_in_sim):
    '''

    Parameters: GDD_matrix -- a matrix the size of the sim grid of accumulated growing degrees over this year in sim
                drydays_fraction_mat -- the fraction 0 to 1 of the growing season in drought
                relative_soil_fertility_matrix -- a matrix the size of sim grid with values 0 to 1 for each plot in sim 
                                                  & the conversion from site index to Mg/ha/yr productivity limitation 
                                                  already completed (table in user manual)

#TODO:    Returns:    GDD_3D_spp_factor_matrix -- 
                      soil_moist_3D_spp_factor_matrix -- 
                      soil_fert_3D_spp_factor_matrix --
    '''
    nx,ny = GDD_matrix.shape
    GDD_3D_spp_factor_matrix = np.zeros((nx,ny,spp_in_sim))
    soil_moist_3D_spp_factor_matrix = np.zeros((nx,ny,spp_in_sim))
    soil_fert_3D_spp_factor_matrix = np.zeros((nx,ny,spp_in_sim))

    return compute_species_factors_numba(GDD_matrix, GDD_3D_spp_factor_matrix, 
                                         drydays_fraction_mat, soil_moist_3D_spp_factor_matrix,
                                         relative_soil_fertility_matrix, soil_fert_3D_spp_factor_matrix,
                                         nx, ny, spp_in_sim)

@numba.jit(nopython=True)
def compute_species_factors_numba(GDD_matrix, GDD_3D_spp_factor_matrix, 
                                  drydays_fraction_mat, soil_moist_3D_spp_factor_matrix,
                                  relative_soil_fertility_matrix, soil_fert_3D_spp_factor_matrix,
                                  nx, ny, spp_in_sim):
    for x in range(nx):
        for y in range(ny):
            for spp in range(spp_in_sim): #address of each cell in 3-D matrix
                if spp == 0:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_0(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_0(drydays_fraction_mat[x,y])
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_0(relative_soil_fertility_matrix[x,y])
                elif spp == 1:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_1(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_1(drydays_fraction_mat[x,y])
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_1(relative_soil_fertility_matrix[x,y])
                elif spp == 2:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_2(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_2(drydays_fraction_mat[x,y])
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_2(relative_soil_fertility_matrix[x,y])
                elif spp == 3:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_3(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_3(drydays_fraction_mat[x,y])
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_3(relative_soil_fertility_matrix[x,y])
                elif spp == 4:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_4(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_4(drydays_fraction_mat[x,y])
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_4(relative_soil_fertility_matrix[x,y])
                elif spp == 5:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_5(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_5(drydays_fraction_mat[x,y])
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_5(relative_soil_fertility_matrix[x,y])
                elif spp == 6:
                    GDD_3D_spp_factor_matrix[x,y,spp] = degree_day_factor_numba_species_6(GDD_matrix[x,y])
                    soil_moist_3D_spp_factor_matrix[x,y,spp] = soil_moisture_factor_numba_species_6(drydays_fraction_mat[x,y])
                    soil_fert_3D_spp_factor_matrix[x,y,spp] = soil_fertility_factor_numba_species_6(relative_soil_fertility_matrix[x,y])

    return GDD_3D_spp_factor_matrix, soil_moist_3D_spp_factor_matrix, soil_fert_3D_spp_factor_matrix


@numba.jit()
def compute_available_light_factors_by_species(available_light_mat, number_of_species):
    '''
    For the input 3D matrix of available light, compute the species specific light factor for each of the 
    species in the simulation.

    Parameters: available_light_mat -- available light for every location in the simulation 3D area
                                       size 3D: nx, ny, elev (where elev is max tree height + max DEM offset)
                number_of_species -- the number of species in the simulation

    Returns: light_factor_by_species_matrix -- species specific light factors computed above ground
                                               size 4D: nx, ny, nz, number_of_species
    '''
    nx, ny, nz = available_light_mat.shape
    light_factor_by_species_matrix = np.zeros((nx,ny,nz,number_of_species))

    # iterate through each plot x,y
    for x in range(nx):
        for y in range(ny):
            # for each species compute the light factor at every location between the ground and the sky
            for z in range(nz):
                # the available light at this location (x,y,z)
                al = available_light_mat[x,y,z]
                if al > 0.:
                    # compute the factors by species
                    for spp in range(number_of_species):
                        if spp == 0:
                            light_factor_by_species_matrix[x,y,z,spp] = available_light_factor_numba_species_0(al)
                        elif spp == 1:
                            light_factor_by_species_matrix[x,y,z,spp] = available_light_factor_numba_species_1(al)
                        elif spp == 2:
                            light_factor_by_species_matrix[x,y,z,spp] = available_light_factor_numba_species_2(al)
                        elif spp == 3:
                            light_factor_by_species_matrix[x,y,z,spp] = available_light_factor_numba_species_3(al)
                        elif spp == 4:
                            light_factor_by_species_matrix[x,y,z,spp] = available_light_factor_numba_species_4(al)
                        elif spp == 5:
                            light_factor_by_species_matrix[x,y,z,spp] = available_light_factor_numba_species_5(al)
                        elif spp == 6:
                            light_factor_by_species_matrix[x,y,z,spp] = available_light_factor_numba_species_6(al)

    return light_factor_by_species_matrix


@numba.jit()
def compute_actual_leaf_area(DBH_matrix, species_code_matrix, crown_base_matrix, tree_height_matrix, total_leaf_area_matrix, 
                               actual_leaf_area_mat):
    '''
    Take the computed foliage densities for each tree, and sum them within each plot, creating an accumulated
    foliage density profile for the plot to use as input into the light computation

    Parameters:  DBH_matrix -- records DBH for every tree in sim, size: sim grid by number of trees on each plot
                               size : nx, ny, MAX_TREES_PER_PLOT
                 species_code_matrix -- records the specie of each tree in sim, size: sim grid by number of trees on each plot
                                        size : nx, ny, MAX_TREES_PER_PLOT
                 crown_base_matrix -- records the crown base for each tree in sim, size: sim grid by number of trees 
                                      on each plot
                                      size : nx, ny, MAX_TREES_PER_PLOT
                 tree_height_matrix -- the height of each individual tree on each plot
                                       size : nx, ny, MAX_TREES_PER_PLOT
                 total_leaf_area_matrix -- the total leaf area of each individual tree on each plot
                                           size : nx, ny, MAX_TREES_PER_PLOT
                 actual_leaf_area_mat   --  pre-initialized: contains -1 below ground and 0 above ground for each plot and air space above plot
                                            size: nx, ny, vertical space = (max_tree_ht+(max elevation in sim - min elevation in sim))

    Returns:  actual_leaf_area_mat --  contains contains the actual leaf area column for each plot in the simulation grid
                                       size: nx, ny, MAX_TREE_HEIGHT
    '''
    MAX_TREE_HEIGHT = 50
    nx,ny,ntrees = DBH_matrix.shape
    actual_leaf_area_mat = np.zeros( (nx,ny,MAX_TREE_HEIGHT) )
    for x in range(nx):
        for y in range(ny):
            # iterate through each tree and add to the plot foliage density popsicle
            for individual in range(ntrees): #address of each cell in 3-D matrix
                tree_dbh = DBH_matrix[x,y,individual] #get tree DBH from DBH matrix
                if tree_dbh > 0.0:
                    # foliage density is basically the leaf area / the height
                    tree_height = tree_height_matrix[x,y,individual]
                    crown_base = crown_base_matrix[x,y,individual]
                    crown_length = tree_height - crown_base
                    if crown_length > 0:
                        total_leaf_area = total_leaf_area_matrix[x,y,individual]
                        fd = total_leaf_area / crown_length
                        # accumulate the foliage density popsicle for this plot consisting of many trees on the same DEM elevation
                        for ht in range(crown_base, int(tree_height)):
                            actual_leaf_area_mat[x,y,ht] += fd

    return actual_leaf_area_mat

@numba.jit()
def compute_individual_tree_values(DBH_matrix, species_code_matrix, crown_base_matrix):
    '''
    Compute species specific values for each tree in the simulation.
    The current computed values are:
        individual height (m)
        individual total leaf area (m^2)
        individual biomass (kg)
        optimal growth increment (cm)
        individual optimal biomass (kg)
        individual basal area (m^2)
        individual biovolume (m^3)
        individual optimal biovolume (m^3)
        individual optimal biovolume increment (m^3)

    Parameters : DBH_matrix -- a dbh value (cm) for each tree in the simulation
                               size : nx, ny, ntrees
                 species_code_matrix -- the species code for every tree in the simulation
                                        size : nx, ny, ntrees
                 crown_base_matrix -- the height (m) of the base of each tree crown
                                      size : nx, ny, ntrees

    Returns : tree_height_matrix -- the species specific height (m) of each tree in the simulation
                                    size : nx, ny, ntrees
              total_leaf_area_matrix -- the total leaf area (m^2) of each tree in the simulation
                                        size : nx, ny, ntrees
              biomass_matrix -- the total biomass (kg) of each tree
                                size : nx, ny, ntrees
              opt_inc_matrix -- the optimal dbh increment (cm) that the individual tree can grow under optimal conditions
                                size : nx, ny, ntrees
              optimal_biomass_matrix -- the biomass (kg) that the tree could achieve next year under optimal conditions
                                        size : nx, ny, ntrees
              basal_area_matrix -- the basal area (m^2) for each individual tree
                                   size : nx, ny, ntrees
              biovolume_matrix -- the biovolume (m^3) for each individual tree
                                   size : nx, ny, ntrees
              optimal_biovolume_matrix -- the biovolume (m^3) that the tree could achieve next year under optimal conditions
                                          size : nx, ny, ntrees
              optimal_biovolume_increment_matrix -- the biovolume increment (m^3) that the tree could achieve next year under optimal conditions
                                                    size : nx, ny, ntrees
    '''
    nx,ny,ntrees = DBH_matrix.shape
    tree_height_matrix = np.zeros((nx,ny,ntrees))
    total_leaf_area_matrix = np.zeros((nx,ny,ntrees))
    biomass_matrix = np.zeros((nx,ny,ntrees))
    opt_inc_matrix = np.zeros((nx,ny,ntrees))
    optimal_biomass_matrix = np.zeros((nx,ny,ntrees))
    basal_area_matrix = np.zeros((nx,ny,ntrees))
    biovolume_matrix = np.zeros((nx,ny,ntrees))
    optimal_biovolume_matrix = np.zeros((nx,ny,ntrees))
    optimal_biovolume_increment_matrix = np.zeros((nx,ny,ntrees))

    for x in range(nx):
        for y in range(ny):
            for ind in range(ntrees):
                dbh = DBH_matrix[x,y,ind]
                crown_base = crown_base_matrix[x,y,ind]
                species_code = species_code_matrix[x,y,ind]
                if species_code == 0:                
                    tree_height = tree_height_numba_species_0(dbh)
                    tree_height_matrix[x,y,ind] = tree_height
                    total_leaf_area_matrix[x,y,ind] = total_leaf_area_numba_species_0(dbh, tree_height, crown_base)
                    biomass_matrix[x,y,ind] = tree_biomass_numba_species_0(dbh)
                    opt_inc = optimal_growth_increment_numba_species_0(dbh)
                    opt_inc_matrix[x,y,ind] = opt_inc
                    optimal_biomass_matrix[x,y,ind] = tree_biomass_numba_species_0(dbh + opt_inc)
                    basal_area_matrix[x,y,ind] = basal_area_numba_species_0(dbh)
                    biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_0(dbh)
                    optimal_biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_0(dbh + opt_inc)
                    optimal_biovolume_increment_matrix[x,y,ind] = optimal_biovolume_matrix[x,y,ind] - biovolume_matrix[x,y,ind]
                elif species_code == 1:
                    tree_height = tree_height_numba_species_1(dbh)
                    tree_height_matrix[x,y,ind] = tree_height
                    total_leaf_area_matrix[x,y,ind] = total_leaf_area_numba_species_1(dbh, tree_height, crown_base)
                    biomass_matrix[x,y,ind] = tree_biomass_numba_species_1(dbh)
                    opt_inc = optimal_growth_increment_numba_species_1(dbh)
                    opt_inc_matrix[x,y,ind] = opt_inc
                    optimal_biomass_matrix[x,y,ind] = tree_biomass_numba_species_1(dbh + opt_inc)
                    basal_area_matrix[x,y,ind] = basal_area_numba_species_1(dbh)
                    biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_1(dbh)
                    optimal_biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_1(dbh + opt_inc)
                    optimal_biovolume_increment_matrix[x,y,ind] = optimal_biovolume_matrix[x,y,ind] - biovolume_matrix[x,y,ind]
                elif species_code == 2:
                    tree_height = tree_height_numba_species_2(dbh)
                    tree_height_matrix[x,y,ind] = tree_height
                    total_leaf_area_matrix[x,y,ind] = total_leaf_area_numba_species_2(dbh, tree_height, crown_base)
                    biomass_matrix[x,y,ind] = tree_biomass_numba_species_2(dbh)
                    opt_inc = optimal_growth_increment_numba_species_2(dbh)
                    opt_inc_matrix[x,y,ind] = opt_inc
                    optimal_biomass_matrix[x,y,ind] = tree_biomass_numba_species_2(dbh + opt_inc)
                    basal_area_matrix[x,y,ind] = basal_area_numba_species_2(dbh)
                    biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_2(dbh)
                    optimal_biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_2(dbh + opt_inc)
                    optimal_biovolume_increment_matrix[x,y,ind] = optimal_biovolume_matrix[x,y,ind] - biovolume_matrix[x,y,ind]
                elif species_code == 3:
                    tree_height = tree_height_numba_species_3(dbh)
                    tree_height_matrix[x,y,ind] = tree_height
                    total_leaf_area_matrix[x,y,ind] = total_leaf_area_numba_species_3(dbh, tree_height, crown_base)
                    biomass_matrix[x,y,ind] = tree_biomass_numba_species_3(dbh)
                    opt_inc = optimal_growth_increment_numba_species_3(dbh)
                    opt_inc_matrix[x,y,ind] = opt_inc
                    optimal_biomass_matrix[x,y,ind] = tree_biomass_numba_species_3(dbh + opt_inc)
                    basal_area_matrix[x,y,ind] = basal_area_numba_species_3(dbh)
                    biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_3(dbh)
                    optimal_biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_3(dbh + opt_inc)
                    optimal_biovolume_increment_matrix[x,y,ind] = optimal_biovolume_matrix[x,y,ind] - biovolume_matrix[x,y,ind]
                elif species_code == 4:
                    tree_height = tree_height_numba_species_4(dbh)
                    tree_height_matrix[x,y,ind] = tree_height
                    total_leaf_area_matrix[x,y,ind] = total_leaf_area_numba_species_4(dbh, tree_height, crown_base)
                    biomass_matrix[x,y,ind] = tree_biomass_numba_species_4(dbh)
                    opt_inc = optimal_growth_increment_numba_species_4(dbh)
                    opt_inc_matrix[x,y,ind] = opt_inc
                    optimal_biomass_matrix[x,y,ind] = tree_biomass_numba_species_4(dbh + opt_inc)
                    basal_area_matrix[x,y,ind] = basal_area_numba_species_4(dbh)
                    biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_4(dbh)
                    optimal_biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_4(dbh + opt_inc)
                    optimal_biovolume_increment_matrix[x,y,ind] = optimal_biovolume_matrix[x,y,ind] - biovolume_matrix[x,y,ind]
                elif species_code == 5:
                    tree_height = tree_height_numba_species_5(dbh)
                    tree_height_matrix[x,y,ind] = tree_height
                    total_leaf_area_matrix[x,y,ind] = total_leaf_area_numba_species_5(dbh, tree_height, crown_base)
                    biomass_matrix[x,y,ind] = tree_biomass_numba_species_5(dbh)
                    opt_inc = optimal_growth_increment_numba_species_5(dbh)
                    opt_inc_matrix[x,y,ind] = opt_inc
                    optimal_biomass_matrix[x,y,ind] = tree_biomass_numba_species_5(dbh + opt_inc)
                    basal_area_matrix[x,y,ind] = basal_area_numba_species_5(dbh)
                    biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_5(dbh)
                    optimal_biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_5(dbh + opt_inc)
                    optimal_biovolume_increment_matrix[x,y,ind] = optimal_biovolume_matrix[x,y,ind] - biovolume_matrix[x,y,ind]
                elif species_code == 6:
                    tree_height = tree_height_numba_species_6(dbh)
                    tree_height_matrix[x,y,ind] = tree_height
                    total_leaf_area_matrix[x,y,ind] = total_leaf_area_numba_species_6(dbh, tree_height, crown_base)
                    biomass_matrix[x,y,ind] = tree_biomass_numba_species_6(dbh)
                    opt_inc = optimal_growth_increment_numba_species_6(dbh)
                    opt_inc_matrix[x,y,ind] = opt_inc
                    optimal_biomass_matrix[x,y,ind] = tree_biomass_numba_species_6(dbh + opt_inc)
                    basal_area_matrix[x,y,ind] = basal_area_numba_species_6(dbh)
                    biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_6(dbh)
                    optimal_biovolume_matrix[x,y,ind] = tree_biovolume_numba_species_6(dbh + opt_inc)
                    optimal_biovolume_increment_matrix[x,y,ind] = optimal_biovolume_matrix[x,y,ind] - biovolume_matrix[x,y,ind]

    return tree_height_matrix, total_leaf_area_matrix, biomass_matrix, opt_inc_matrix, optimal_biomass_matrix, basal_area_matrix, biovolume_matrix,            optimal_biovolume_matrix, optimal_biovolume_increment_matrix


# ********************************
# By specie code
# ********************************

# ***** Species Code 0
#  ABSI:
#    AGE_MORTALITY_EQUATION: <function standard_age_mortality_probablity_fn__0 at 0x7f9287e1bb90>
#    AVAILABLE_LIGHT_FACTOR_EQUATION: <function standard_available_light_factor_fn__5 at 0x7f9287e1bde8>
#    BASAL_AREA_EQUATION: <function standard_basal_area at 0x7f9287e12578>
#    BIOMASS_EQUATION: <function absi_total_biomass at 0x7f9287e1b668>
#    BIOVOLUME_EQUATION: <function absi_biovolume at 0x7f9287e1b1b8>
#    DEGREE_DAY_FACTOR_EQUATION: <function half_parabola_degree_day_factor_fn__4 at 0x7f9287e1bd70>
#    DMAX: 80.0
#    ENABLED: True
#    INSEEDING_LAG: 6
#    LEAF_AREA_EQUATION: <function absi_leaf_area_fn at 0x7f9287e12de8>
#    LIGHT_COMPENSATION_POINT: 0.15
#    OPTIMAL_GROWTH_INCREMENT_EQUATION: <function bragg_optimal_growth_increment_innerfn__1 at 0x7f9287e1bc08>
#    PERMAFROST_FACTOR_EQUATION: <function permafrost_factor_fn__6 at 0x7f9287e1be60>
#    SEED: 0.31
#    SOIL_FERTILITY_FACTOR_EQUATION: <function standard_soil_fertility_factor_fn__2 at 0x7f9287e1bc80>
#    SOIL_MOISTURE_FACTOR_EQUATION: <function standard_soil_moisture_factor_fn__3 at 0x7f9287e1bcf8>
#    TREE_HEIGHT_EQUATION: <function absi_tree_height at 0x7f9287e12aa0>


# species specific degree day factor equation (see driver)
degree_day_factor_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['DEGREE_DAY_FACTOR_EQUATION'])

# species specific soil moisture factor equation (see driver)
soil_moisture_factor_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['SOIL_MOISTURE_FACTOR_EQUATION'])

# species specific soil fertility factor equation (see driver)
soil_fertility_factor_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['SOIL_FERTILITY_FACTOR_EQUATION'])

# species specific permafrost factor equation (see driver)
permafrost_factor_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['PERMAFROST_FACTOR_EQUATION'])

# species specific light factor equation (see driver)
available_light_factor_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['AVAILABLE_LIGHT_FACTOR_EQUATION'])

# species specific tree height equation (see driver)
tree_height_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['TREE_HEIGHT_EQUATION'])

# species specific leaf area equation (see driver)
leaf_area_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['LEAF_AREA_EQUATION'])

@numba.jit(nopython=True)
def total_leaf_area_numba_species_0(dbh, tree_height, crown_base):
    '''
    Compute the total leaf area for a single tree.

    Parameters: dbh -- the tree dbh in cm
                tree_height -- the height of the tree in meters
                crown_base -- the height of the base of the crown in meters

    Returns: the total leaf area in m^2
    '''
    leaf_area = leaf_area_numba_species_0(dbh)
    adjusted_leaf_area = leaf_area * (tree_height - crown_base)/tree_height  #drop the leaves below crown base
    return adjusted_leaf_area

# species specific biomass equation (see driver)
tree_biomass_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['BIOMASS_EQUATION'])

# species specific biovolume equation (see driver)
tree_biovolume_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['BIOVOLUME_EQUATION'])

# species specific optimal growth increment equation (see driver)
optimal_growth_increment_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['OPTIMAL_GROWTH_INCREMENT_EQUATION'])

# species specific basal area function (see driver)
basal_area_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['BASAL_AREA_EQUATION'])

# species specific age mortality probability function (see driver)
age_mortality_probablity_numba_species_0 = numba.jit(nopython=True)(driver['species']['ABSI']['AGE_MORTALITY_EQUATION'])

# ***** Species Code 1
#  BEPE:
#    AGE_MORTALITY_EQUATION: <function standard_age_mortality_probablity_fn__14 at 0x7f9287e1e2a8>
#    AVAILABLE_LIGHT_FACTOR_EQUATION: <function standard_available_light_factor_fn__19 at 0x7f9287e1e500>
#    BASAL_AREA_EQUATION: <function standard_basal_area at 0x7f9287e12578>
#    BIOMASS_EQUATION: <function betula_total_biomass at 0x7f9287e1b758>
#    BIOVOLUME_EQUATION: <function bepe_biovolume at 0x7f9287e1b2a8>
#    DEGREE_DAY_FACTOR_EQUATION: <function half_parabola_degree_day_factor_fn__18 at 0x7f9287e1e488>
#    DMAX: 60.0
#    ENABLED: True
#    INSEEDING_LAG: 2
#    LEAF_AREA_EQUATION: <function betula_leaf_area_fn at 0x7f9287e12ed8>
#    LIGHT_COMPENSATION_POINT: 0.03
#    OPTIMAL_GROWTH_INCREMENT_EQUATION: <function bragg_optimal_growth_increment_innerfn__15 at 0x7f9287e1e320>
#    PERMAFROST_FACTOR_EQUATION: <function permafrost_factor_fn__20 at 0x7f9287e1e578>
#    SEED: 0.1
#    SOIL_FERTILITY_FACTOR_EQUATION: <function standard_soil_fertility_factor_fn__16 at 0x7f9287e1e398>
#    SOIL_MOISTURE_FACTOR_EQUATION: <function standard_soil_moisture_factor_fn__17 at 0x7f9287e1e410>
#    TREE_HEIGHT_EQUATION: <function betula_tree_height at 0x7f9287e12b90>


# species specific degree day factor equation (see driver)
degree_day_factor_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['DEGREE_DAY_FACTOR_EQUATION'])

# species specific soil moisture factor equation (see driver)
soil_moisture_factor_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['SOIL_MOISTURE_FACTOR_EQUATION'])

# species specific soil fertility factor equation (see driver)
soil_fertility_factor_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['SOIL_FERTILITY_FACTOR_EQUATION'])

# species specific permafrost factor equation (see driver)
permafrost_factor_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['PERMAFROST_FACTOR_EQUATION'])

# species specific light factor equation (see driver)
available_light_factor_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['AVAILABLE_LIGHT_FACTOR_EQUATION'])

# species specific tree height equation (see driver)
tree_height_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['TREE_HEIGHT_EQUATION'])

# species specific leaf area equation (see driver)
leaf_area_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['LEAF_AREA_EQUATION'])

@numba.jit(nopython=True)
def total_leaf_area_numba_species_1(dbh, tree_height, crown_base):
    '''
    Compute the total leaf area for a single tree.

    Parameters: dbh -- the tree dbh in cm
                tree_height -- the height of the tree in meters
                crown_base -- the height of the base of the crown in meters

    Returns: the total leaf area in m^2
    '''
    leaf_area = leaf_area_numba_species_1(dbh)
    adjusted_leaf_area = leaf_area * (tree_height - crown_base)/tree_height  #drop the leaves below crown base
    return adjusted_leaf_area

# species specific biomass equation (see driver)
tree_biomass_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['BIOMASS_EQUATION'])

# species specific biovolume equation (see driver)
tree_biovolume_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['BIOVOLUME_EQUATION'])

# species specific optimal growth increment equation (see driver)
optimal_growth_increment_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['OPTIMAL_GROWTH_INCREMENT_EQUATION'])

# species specific basal area function (see driver)
basal_area_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['BASAL_AREA_EQUATION'])

# species specific age mortality probability function (see driver)
age_mortality_probablity_numba_species_1 = numba.jit(nopython=True)(driver['species']['BEPE']['AGE_MORTALITY_EQUATION'])

# ***** Species Code 2
#  LASI:
#    AGE_MORTALITY_EQUATION: <function standard_age_mortality_probablity_fn__7 at 0x7f9287e1bed8>
#    AVAILABLE_LIGHT_FACTOR_EQUATION: <function standard_available_light_factor_fn__12 at 0x7f9287e1e1b8>
#    BASAL_AREA_EQUATION: <function standard_basal_area at 0x7f9287e12578>
#    BIOMASS_EQUATION: <function lasi_total_biomass at 0x7f9287e1b6e0>
#    BIOVOLUME_EQUATION: <function lasi_biovolume at 0x7f9287e1b230>
#    DEGREE_DAY_FACTOR_EQUATION: <function half_parabola_degree_day_factor_fn__11 at 0x7f9287e1e140>
#    DMAX: 100.0
#    ENABLED: True
#    INSEEDING_LAG: 2
#    LEAF_AREA_EQUATION: <function lasi_leaf_area_fn at 0x7f9287e12e60>
#    LIGHT_COMPENSATION_POINT: 0.03
#    OPTIMAL_GROWTH_INCREMENT_EQUATION: <function bragg_optimal_growth_increment_innerfn__8 at 0x7f9287e1bf50>
#    PERMAFROST_FACTOR_EQUATION: <function permafrost_factor_fn__13 at 0x7f9287e1e230>
#    SEED: 0.31
#    SOIL_FERTILITY_FACTOR_EQUATION: <function standard_soil_fertility_factor_fn__9 at 0x7f9287e1e050>
#    SOIL_MOISTURE_FACTOR_EQUATION: <function standard_soil_moisture_factor_fn__10 at 0x7f9287e1e0c8>
#    TREE_HEIGHT_EQUATION: <function lasi_tree_height at 0x7f9287e12b18>


# species specific degree day factor equation (see driver)
degree_day_factor_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['DEGREE_DAY_FACTOR_EQUATION'])

# species specific soil moisture factor equation (see driver)
soil_moisture_factor_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['SOIL_MOISTURE_FACTOR_EQUATION'])

# species specific soil fertility factor equation (see driver)
soil_fertility_factor_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['SOIL_FERTILITY_FACTOR_EQUATION'])

# species specific permafrost factor equation (see driver)
permafrost_factor_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['PERMAFROST_FACTOR_EQUATION'])

# species specific light factor equation (see driver)
available_light_factor_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['AVAILABLE_LIGHT_FACTOR_EQUATION'])

# species specific tree height equation (see driver)
tree_height_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['TREE_HEIGHT_EQUATION'])

# species specific leaf area equation (see driver)
leaf_area_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['LEAF_AREA_EQUATION'])

@numba.jit(nopython=True)
def total_leaf_area_numba_species_2(dbh, tree_height, crown_base):
    '''
    Compute the total leaf area for a single tree.

    Parameters: dbh -- the tree dbh in cm
                tree_height -- the height of the tree in meters
                crown_base -- the height of the base of the crown in meters

    Returns: the total leaf area in m^2
    '''
    leaf_area = leaf_area_numba_species_2(dbh)
    adjusted_leaf_area = leaf_area * (tree_height - crown_base)/tree_height  #drop the leaves below crown base
    return adjusted_leaf_area

# species specific biomass equation (see driver)
tree_biomass_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['BIOMASS_EQUATION'])

# species specific biovolume equation (see driver)
tree_biovolume_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['BIOVOLUME_EQUATION'])

# species specific optimal growth increment equation (see driver)
optimal_growth_increment_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['OPTIMAL_GROWTH_INCREMENT_EQUATION'])

# species specific basal area function (see driver)
basal_area_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['BASAL_AREA_EQUATION'])

# species specific age mortality probability function (see driver)
age_mortality_probablity_numba_species_2 = numba.jit(nopython=True)(driver['species']['LASI']['AGE_MORTALITY_EQUATION'])

# ***** Species Code 3
#  PIOB:
#    AGE_MORTALITY_EQUATION: <function standard_age_mortality_probablity_fn__21 at 0x7f9287e1e5f0>
#    AVAILABLE_LIGHT_FACTOR_EQUATION: <function standard_available_light_factor_fn__26 at 0x7f9287e1e848>
#    BASAL_AREA_EQUATION: <function standard_basal_area at 0x7f9287e12578>
#    BIOMASS_EQUATION: <function piob_total_biomass at 0x7f9287e1b7d0>
#    BIOVOLUME_EQUATION: <function piob_biovolume at 0x7f9287e1b410>
#    DEGREE_DAY_FACTOR_EQUATION: <function half_parabola_degree_day_factor_fn__25 at 0x7f9287e1e7d0>
#    DMAX: 50.0
#    ENABLED: True
#    INSEEDING_LAG: 6
#    LEAF_AREA_EQUATION: <function piob_leaf_area_fn at 0x7f9287e12f50>
#    LIGHT_COMPENSATION_POINT: 0.15
#    OPTIMAL_GROWTH_INCREMENT_EQUATION: <function bragg_optimal_growth_increment_innerfn__22 at 0x7f9287e1e668>
#    PERMAFROST_FACTOR_EQUATION: <function permafrost_factor_fn__27 at 0x7f9287e1e8c0>
#    SEED: 0.31
#    SOIL_FERTILITY_FACTOR_EQUATION: <function standard_soil_fertility_factor_fn__23 at 0x7f9287e1e6e0>
#    SOIL_MOISTURE_FACTOR_EQUATION: <function standard_soil_moisture_factor_fn__24 at 0x7f9287e1e758>
#    TREE_HEIGHT_EQUATION: <function piob_height_piecwise_fn at 0x7f9287e12c08>


# species specific degree day factor equation (see driver)
degree_day_factor_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['DEGREE_DAY_FACTOR_EQUATION'])

# species specific soil moisture factor equation (see driver)
soil_moisture_factor_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['SOIL_MOISTURE_FACTOR_EQUATION'])

# species specific soil fertility factor equation (see driver)
soil_fertility_factor_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['SOIL_FERTILITY_FACTOR_EQUATION'])

# species specific permafrost factor equation (see driver)
permafrost_factor_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['PERMAFROST_FACTOR_EQUATION'])

# species specific light factor equation (see driver)
available_light_factor_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['AVAILABLE_LIGHT_FACTOR_EQUATION'])

# species specific tree height equation (see driver)
tree_height_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['TREE_HEIGHT_EQUATION'])

# species specific leaf area equation (see driver)
leaf_area_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['LEAF_AREA_EQUATION'])

@numba.jit(nopython=True)
def total_leaf_area_numba_species_3(dbh, tree_height, crown_base):
    '''
    Compute the total leaf area for a single tree.

    Parameters: dbh -- the tree dbh in cm
                tree_height -- the height of the tree in meters
                crown_base -- the height of the base of the crown in meters

    Returns: the total leaf area in m^2
    '''
    leaf_area = leaf_area_numba_species_3(dbh)
    adjusted_leaf_area = leaf_area * (tree_height - crown_base)/tree_height  #drop the leaves below crown base
    return adjusted_leaf_area

# species specific biomass equation (see driver)
tree_biomass_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['BIOMASS_EQUATION'])

# species specific biovolume equation (see driver)
tree_biovolume_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['BIOVOLUME_EQUATION'])

# species specific optimal growth increment equation (see driver)
optimal_growth_increment_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['OPTIMAL_GROWTH_INCREMENT_EQUATION'])

# species specific basal area function (see driver)
basal_area_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['BASAL_AREA_EQUATION'])

# species specific age mortality probability function (see driver)
age_mortality_probablity_numba_species_3 = numba.jit(nopython=True)(driver['species']['PIOB']['AGE_MORTALITY_EQUATION'])

# ***** Species Code 4
#  PISI:
#    AGE_MORTALITY_EQUATION: <function standard_age_mortality_probablity_fn__28 at 0x7f9287e1e938>
#    AVAILABLE_LIGHT_FACTOR_EQUATION: <function standard_available_light_factor_fn__33 at 0x7f9287e1eb90>
#    BASAL_AREA_EQUATION: <function standard_basal_area at 0x7f9287e12578>
#    BIOMASS_EQUATION: <function pisi_total_biomass at 0x7f9287e1b848>
#    BIOVOLUME_EQUATION: <function pisi_biovolume at 0x7f9287e1b488>
#    DEGREE_DAY_FACTOR_EQUATION: <function half_parabola_degree_day_factor_fn__32 at 0x7f9287e1eb18>
#    DMAX: 120.0
#    ENABLED: True
#    INSEEDING_LAG: 5
#    LEAF_AREA_EQUATION: <function pisi_leaf_area_fn at 0x7f9287e1b050>
#    LIGHT_COMPENSATION_POINT: 0.12
#    OPTIMAL_GROWTH_INCREMENT_EQUATION: <function bragg_optimal_growth_increment_innerfn__29 at 0x7f9287e1e9b0>
#    PERMAFROST_FACTOR_EQUATION: <function permafrost_factor_fn__34 at 0x7f9287e1ec08>
#    SEED: 0.56
#    SOIL_FERTILITY_FACTOR_EQUATION: <function standard_soil_fertility_factor_fn__30 at 0x7f9287e1ea28>
#    SOIL_MOISTURE_FACTOR_EQUATION: <function standard_soil_moisture_factor_fn__31 at 0x7f9287e1eaa0>
#    TREE_HEIGHT_EQUATION: <function pisi_height_piecwise_fn at 0x7f9287e12c80>


# species specific degree day factor equation (see driver)
degree_day_factor_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['DEGREE_DAY_FACTOR_EQUATION'])

# species specific soil moisture factor equation (see driver)
soil_moisture_factor_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['SOIL_MOISTURE_FACTOR_EQUATION'])

# species specific soil fertility factor equation (see driver)
soil_fertility_factor_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['SOIL_FERTILITY_FACTOR_EQUATION'])

# species specific permafrost factor equation (see driver)
permafrost_factor_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['PERMAFROST_FACTOR_EQUATION'])

# species specific light factor equation (see driver)
available_light_factor_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['AVAILABLE_LIGHT_FACTOR_EQUATION'])

# species specific tree height equation (see driver)
tree_height_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['TREE_HEIGHT_EQUATION'])

# species specific leaf area equation (see driver)
leaf_area_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['LEAF_AREA_EQUATION'])

@numba.jit(nopython=True)
def total_leaf_area_numba_species_4(dbh, tree_height, crown_base):
    '''
    Compute the total leaf area for a single tree.

    Parameters: dbh -- the tree dbh in cm
                tree_height -- the height of the tree in meters
                crown_base -- the height of the base of the crown in meters

    Returns: the total leaf area in m^2
    '''
    leaf_area = leaf_area_numba_species_4(dbh)
    adjusted_leaf_area = leaf_area * (tree_height - crown_base)/tree_height  #drop the leaves below crown base
    return adjusted_leaf_area

# species specific biomass equation (see driver)
tree_biomass_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['BIOMASS_EQUATION'])

# species specific biovolume equation (see driver)
tree_biovolume_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['BIOVOLUME_EQUATION'])

# species specific optimal growth increment equation (see driver)
optimal_growth_increment_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['OPTIMAL_GROWTH_INCREMENT_EQUATION'])

# species specific basal area function (see driver)
basal_area_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['BASAL_AREA_EQUATION'])

# species specific age mortality probability function (see driver)
age_mortality_probablity_numba_species_4 = numba.jit(nopython=True)(driver['species']['PISI']['AGE_MORTALITY_EQUATION'])

# ***** Species Code 5
#  PISY:
#    AGE_MORTALITY_EQUATION: <function standard_age_mortality_probablity_fn__35 at 0x7f9287e1ec80>
#    AVAILABLE_LIGHT_FACTOR_EQUATION: <function standard_available_light_factor_fn__40 at 0x7f9287e1eed8>
#    BASAL_AREA_EQUATION: <function standard_basal_area at 0x7f9287e12578>
#    BIOMASS_EQUATION: <function pisy_total_biomass at 0x7f9287e1b8c0>
#    BIOVOLUME_EQUATION: <function pisy_biovolume at 0x7f9287e1b500>
#    DEGREE_DAY_FACTOR_EQUATION: <function half_parabola_degree_day_factor_fn__39 at 0x7f9287e1ee60>
#    DMAX: 80.0
#    ENABLED: True
#    INSEEDING_LAG: 3
#    LEAF_AREA_EQUATION: <function pisy_leaf_area_fn at 0x7f9287e1b0c8>
#    LIGHT_COMPENSATION_POINT: 0.06
#    OPTIMAL_GROWTH_INCREMENT_EQUATION: <function bragg_optimal_growth_increment_innerfn__36 at 0x7f9287e1ecf8>
#    PERMAFROST_FACTOR_EQUATION: <function permafrost_factor_fn__41 at 0x7f9287e1ef50>
#    SEED: 0.31
#    SOIL_FERTILITY_FACTOR_EQUATION: <function standard_soil_fertility_factor_fn__37 at 0x7f9287e1ed70>
#    SOIL_MOISTURE_FACTOR_EQUATION: <function standard_soil_moisture_factor_fn__38 at 0x7f9287e1ede8>
#    TREE_HEIGHT_EQUATION: <function pisy_height_piecwise_fn at 0x7f9287e12cf8>


# species specific degree day factor equation (see driver)
degree_day_factor_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['DEGREE_DAY_FACTOR_EQUATION'])

# species specific soil moisture factor equation (see driver)
soil_moisture_factor_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['SOIL_MOISTURE_FACTOR_EQUATION'])

# species specific soil fertility factor equation (see driver)
soil_fertility_factor_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['SOIL_FERTILITY_FACTOR_EQUATION'])

# species specific permafrost factor equation (see driver)
permafrost_factor_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['PERMAFROST_FACTOR_EQUATION'])

# species specific light factor equation (see driver)
available_light_factor_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['AVAILABLE_LIGHT_FACTOR_EQUATION'])

# species specific tree height equation (see driver)
tree_height_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['TREE_HEIGHT_EQUATION'])

# species specific leaf area equation (see driver)
leaf_area_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['LEAF_AREA_EQUATION'])

@numba.jit(nopython=True)
def total_leaf_area_numba_species_5(dbh, tree_height, crown_base):
    '''
    Compute the total leaf area for a single tree.

    Parameters: dbh -- the tree dbh in cm
                tree_height -- the height of the tree in meters
                crown_base -- the height of the base of the crown in meters

    Returns: the total leaf area in m^2
    '''
    leaf_area = leaf_area_numba_species_5(dbh)
    adjusted_leaf_area = leaf_area * (tree_height - crown_base)/tree_height  #drop the leaves below crown base
    return adjusted_leaf_area

# species specific biomass equation (see driver)
tree_biomass_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['BIOMASS_EQUATION'])

# species specific biovolume equation (see driver)
tree_biovolume_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['BIOVOLUME_EQUATION'])

# species specific optimal growth increment equation (see driver)
optimal_growth_increment_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['OPTIMAL_GROWTH_INCREMENT_EQUATION'])

# species specific basal area function (see driver)
basal_area_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['BASAL_AREA_EQUATION'])

# species specific age mortality probability function (see driver)
age_mortality_probablity_numba_species_5 = numba.jit(nopython=True)(driver['species']['PISY']['AGE_MORTALITY_EQUATION'])

# ***** Species Code 6
#  POTR:
#    AGE_MORTALITY_EQUATION: <function standard_age_mortality_probablity_fn__42 at 0x7f9287ce1050>
#    AVAILABLE_LIGHT_FACTOR_EQUATION: <function standard_available_light_factor_fn__47 at 0x7f9287ce12a8>
#    BASAL_AREA_EQUATION: <function standard_basal_area at 0x7f9287e12578>
#    BIOMASS_EQUATION: <function populus_total_biomass at 0x7f9287e1b938>
#    BIOVOLUME_EQUATION: <function potr_biovolume at 0x7f9287e1b5f0>
#    DEGREE_DAY_FACTOR_EQUATION: <function half_parabola_degree_day_factor_fn__46 at 0x7f9287ce1230>
#    DMAX: 100.0
#    ENABLED: True
#    INSEEDING_LAG: 3
#    LEAF_AREA_EQUATION: <function populus_leaf_area_fn at 0x7f9287e1b140>
#    LIGHT_COMPENSATION_POINT: 0.06
#    OPTIMAL_GROWTH_INCREMENT_EQUATION: <function bragg_optimal_growth_increment_innerfn__43 at 0x7f9287ce10c8>
#    PERMAFROST_FACTOR_EQUATION: <function permafrost_factor_fn__48 at 0x7f9287ce1320>
#    SEED: 0.1
#    SOIL_FERTILITY_FACTOR_EQUATION: <function standard_soil_fertility_factor_fn__44 at 0x7f9287ce1140>
#    SOIL_MOISTURE_FACTOR_EQUATION: <function standard_soil_moisture_factor_fn__45 at 0x7f9287ce11b8>
#    TREE_HEIGHT_EQUATION: <function populus_tree_height at 0x7f9287e12d70>


# species specific degree day factor equation (see driver)
degree_day_factor_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['DEGREE_DAY_FACTOR_EQUATION'])

# species specific soil moisture factor equation (see driver)
soil_moisture_factor_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['SOIL_MOISTURE_FACTOR_EQUATION'])

# species specific soil fertility factor equation (see driver)
soil_fertility_factor_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['SOIL_FERTILITY_FACTOR_EQUATION'])

# species specific permafrost factor equation (see driver)
permafrost_factor_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['PERMAFROST_FACTOR_EQUATION'])

# species specific light factor equation (see driver)
available_light_factor_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['AVAILABLE_LIGHT_FACTOR_EQUATION'])

# species specific tree height equation (see driver)
tree_height_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['TREE_HEIGHT_EQUATION'])

# species specific leaf area equation (see driver)
leaf_area_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['LEAF_AREA_EQUATION'])

@numba.jit(nopython=True)
def total_leaf_area_numba_species_6(dbh, tree_height, crown_base):
    '''
    Compute the total leaf area for a single tree.

    Parameters: dbh -- the tree dbh in cm
                tree_height -- the height of the tree in meters
                crown_base -- the height of the base of the crown in meters

    Returns: the total leaf area in m^2
    '''
    leaf_area = leaf_area_numba_species_6(dbh)
    adjusted_leaf_area = leaf_area * (tree_height - crown_base)/tree_height  #drop the leaves below crown base
    return adjusted_leaf_area

# species specific biomass equation (see driver)
tree_biomass_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['BIOMASS_EQUATION'])

# species specific biovolume equation (see driver)
tree_biovolume_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['BIOVOLUME_EQUATION'])

# species specific optimal growth increment equation (see driver)
optimal_growth_increment_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['OPTIMAL_GROWTH_INCREMENT_EQUATION'])

# species specific basal area function (see driver)
basal_area_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['BASAL_AREA_EQUATION'])

# species specific age mortality probability function (see driver)
age_mortality_probablity_numba_species_6 = numba.jit(nopython=True)(driver['species']['POTR']['AGE_MORTALITY_EQUATION'])


# the age mortality probability functions by species
species_code_to_age_mortality_function = [ age_mortality_probablity_numba_species_0, age_mortality_probablity_numba_species_1, age_mortality_probablity_numba_species_2, age_mortality_probablity_numba_species_3, age_mortality_probablity_numba_species_4, age_mortality_probablity_numba_species_5, age_mortality_probablity_numba_species_6, ]

